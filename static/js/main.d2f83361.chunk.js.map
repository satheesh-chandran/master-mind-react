{"version":3,"sources":["utils/constants.js","components/Hole.js","components/CodeRow.js","utils/sourceColors.js","components/SourceRow.js","components/PlayHole.js","utils/range.js","components/PlayRow.js","components/PlayBoard.js","components/ResultRow.js","components/ResultBoard.js","components/Controller.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CHANCES","NUM_OF_COLORS","DEFAULT","EXACT","PRESENCE","color","onClick","className","style","backgroundColor","codeColor","isGameOver","codeHoles","map","index","Hole","key","sourceHoles","sourceColor","PlayHole","props","state","handleClick","bind","this","position","setState","React","Component","start","end","Array","from","_","require","PlayRow","colors","storeColors","submitColors","filter","length","alert","checkColors","parentId","newColorList","slice","turn","holes","range","id","rows","createList","fill","ResultRow","result","presence","exact","concat","checkResult","getRandomNumber","min","max","randomNumber","Math","random","floor","Controller","isWon","undefined","colorCopy","sourceColors","colorIndex","push","splice","getCodeColor","selectColor","rowId","forEach","includes","CodeRow","PlayBoard","ResultBoard","SourceRow","moves","innerText","parseStatusText","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d2f83361.chunk.js","sourcesContent":["module.exports = {\n  CHANCES: 10,\n  NUM_OF_COLORS: 5,\n  DEFAULT: 'white',\n  EXACT: 'red',\n  PRESENCE: 'grey'\n};\n","import React from 'react';\n\nexport default ({ color, onClick }) => (\n  <div\n    className='hole'\n    style={{ backgroundColor: color }}\n    onClick={onClick ? () => onClick(color) : () => {}}\n  ></div>\n);\n","import React from 'react';\nimport Hole from './Hole';\nimport { DEFAULT } from '../utils/constants';\n\nexport default function ({ codeColor, isGameOver }) {\n  const codeHoles = codeColor.map((color, index) => (\n    <Hole key={color} color={isGameOver ? codeColor[index] : DEFAULT} />\n  ));\n  return <div className='codeRow'>{codeHoles}</div>;\n}\n","export default [\n  'red',\n  'brown',\n  'blue',\n  'orange',\n  'green',\n  'purple',\n  'yellow',\n  'pink'\n];\n","import React from 'react';\nimport Hole from './Hole';\nimport sourceColor from '../utils/sourceColors';\n\nexport default function ({ onClick }) {\n  const sourceHoles = sourceColor.map(color => (\n    <Hole key={`source_${color}`} color={color} onClick={onClick} />\n  ));\n  return <div className='sourceRow'>{sourceHoles}</div>;\n}\n","import React from 'react';\nimport { DEFAULT } from '../utils/constants';\n\nclass PlayHole extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { color: DEFAULT };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { onClick, color, position } = this.props;\n    this.setState({ color });\n    onClick(color, position);\n  }\n\n  render() {\n    return (\n      <div\n        className='playHole'\n        style={{ backgroundColor: this.state.color }}\n        onClick={this.handleClick}\n      ></div>\n    );\n  }\n}\n\nexport default PlayHole;\n","export default (start, end) =>\n  Array.from(new Array(end - start), (_, index) => start + index);\n","import React from 'react';\nimport PlayHole from './PlayHole';\nimport range from '../utils/range';\nconst { NUM_OF_COLORS } = require('../utils/constants');\n\nclass PlayRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { colors: new Array(NUM_OF_COLORS) };\n    this.storeColors = this.storeColors.bind(this);\n    this.submitColors = this.submitColors.bind(this);\n  }\n\n  submitColors() {\n    if (this.state.colors.filter(color => color).length !== NUM_OF_COLORS)\n      return alert('Fill The Colors');\n    this.props.checkColors(this.state.colors, this.props.parentId);\n  }\n\n  storeColors(color, position) {\n    this.setState(state => {\n      const newColorList = state.colors.slice();\n      newColorList[position] = color;\n      return { colors: newColorList };\n    });\n  }\n\n  render() {\n    const { parentId, color, turn, isGameOver } = this.props;\n    const holes = range(0, NUM_OF_COLORS).map(id => (\n      <PlayHole\n        key={`${parentId}_${id}`}\n        color={color}\n        position={id}\n        onClick={this.storeColors}\n      />\n    ));\n    return (\n      <div className={`playRow ${parentId === turn ? '' : 'inActive'}`}>\n        {holes}\n        <button\n          className={parentId === turn && !isGameOver ? '' : 'invisible'}\n          onClick={this.submitColors}\n        >\n          CHECK\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default PlayRow;\n","import React from 'react';\nimport PlayRow from './PlayRow';\nimport range from '../utils/range';\n\nconst { CHANCES } = require('../utils/constants');\n\nexport default function ({ color, turn, checkColors, isGameOver }) {\n  const rows = range(0, CHANCES).map(key => (\n    <PlayRow\n      key={key}\n      parentId={key}\n      color={color}\n      turn={turn}\n      checkColors={checkColors}\n      isGameOver={isGameOver}\n    />\n  ));\n  return <div className='playBoard'>{rows}</div>;\n}\n","import React from 'react';\nimport Hole from './Hole';\nimport range from '../utils/range';\nconst {\n  NUM_OF_COLORS,\n  EXACT,\n  PRESENCE,\n  DEFAULT\n} = require('../utils/constants');\n\nconst createList = (length, fill) => new Array(length).fill(fill);\n\nconst ResultRow = function ({ result }) {\n  const [presence, exact] = result || [0, 0];\n  const colors = createList(exact, EXACT).concat(\n    createList(presence, PRESENCE)\n  );\n  const holes = range(0, NUM_OF_COLORS).map(key => (\n    <Hole key={`resultHole_${key}`} color={colors[key] || DEFAULT} />\n  ));\n  return <div className='resultRow'>{holes}</div>;\n};\n\nexport default ResultRow;\n","import React from 'react';\nimport ResultRow from './ResultRow';\nimport range from '../utils/range';\nconst { CHANCES } = require('../utils/constants');\n\nexport default function ({ checkResult }) {\n  const rows = range(0, CHANCES).map(key => (\n    <ResultRow key={`result_${key}`} parentId={key} result={checkResult[key]} />\n  ));\n  return <div className='resultBoard'>{rows}</div>;\n}\n","import React from 'react';\nimport CodeRow from './CodeRow';\nimport SourceRow from './SourceRow';\nimport PlayBoard from './PlayBoard';\nimport ResultBoard from './ResultBoard';\nimport sourceColors from '../utils/sourceColors';\nconst { CHANCES, NUM_OF_COLORS } = require('../utils/constants');\n\nconst getRandomNumber = (min, max) => {\n  const randomNumber = Math.random() * (max - min);\n  return Math.floor(randomNumber + min);\n};\n\nconst getCodeColor = function () {\n  const colorCopy = sourceColors.slice();\n  const codeColor = [];\n  while (codeColor.length < NUM_OF_COLORS) {\n    const colorIndex = getRandomNumber(0, colorCopy.length);\n    codeColor.push(colorCopy[colorIndex]);\n    colorCopy.splice(colorIndex, 1);\n  }\n  return codeColor;\n};\n\nconst parseStatusText = function (moves, isGameOver, isWon) {\n  let innerText = `${CHANCES - moves} MOVES LEFT`;\n  if (isGameOver) innerText = 'YOU LOST';\n  if (isWon) innerText = 'YOU WON';\n  return innerText;\n};\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      turn: 0,\n      isWon: false,\n      color: undefined,\n      checkResult: [],\n      isGameOver: false\n    };\n    this.codeColor = getCodeColor();\n    this.selectColor = this.selectColor.bind(this);\n    this.checkColors = this.checkColors.bind(this);\n  }\n\n  checkColors(colors, rowId) {\n    if (this.state.turn !== rowId) return;\n    if (this.state.turn >= CHANCES - 1) this.setState({ isGameOver: true });\n    const result = [0, 0];\n    colors.forEach(color => this.codeColor.includes(color) && result[0]++);\n    colors.forEach((color, index) => {\n      return color === this.codeColor[index] && result[0]-- && result[1]++;\n    });\n    if (result[1] === NUM_OF_COLORS)\n      this.setState({ isWon: true, isGameOver: true });\n    const { turn, checkResult } = this.state;\n    this.setState({ checkResult: [...checkResult, result], turn: turn + 1 });\n  }\n\n  selectColor(color) {\n    this.setState({ color });\n  }\n\n  render() {\n    const { isGameOver, turn, isWon, color } = this.state;\n    return (\n      <div className='controller'>\n        <CodeRow codeColor={this.codeColor} isGameOver={isGameOver} />\n        <div className={`board ${isGameOver ? 'inActive' : ''}`}>\n          <PlayBoard\n            color={color}\n            turn={turn}\n            checkColors={this.checkColors}\n            isGameOver={isGameOver}\n          />\n          <ResultBoard checkResult={this.state.checkResult} />\n        </div>\n        <SourceRow\n          codeColor={this.codeColor}\n          isGameOver={isGameOver}\n          onClick={this.selectColor}\n        />\n        <h3>{parseStatusText(turn, isGameOver, isWon)}</h3>\n      </div>\n    );\n  }\n}\n\nexport default Controller;\n","import React from 'react';\nimport Controller from './components/Controller'\nimport './App.css';\n\nconst App = function (props) {\n  return <Controller />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './game.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}